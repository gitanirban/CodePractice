Find most occurred k numbers in an array
Given an array of n numbers and an integer k. Find the top k numbers having the maximum frequency.
If two numbers have the same frequency then the larger number should be given preference.

Sample:
Input:
Arr[] = {2, 1, 4, 4, 5, 3, 7, 1},
k = 2
Output: 4 1

Input :
Arr[] = {5, 10, 11, 7, 2, 5, 5, 7, 11, 9, 8},
k = 4
Output: 5 11 7 10


1 3 4 5 <- 2

2 3 4 5

******
5 4 3 1 <- 2

5 4 3 2      1

5 4 3 2

     deq 
start   end
5 

vector<int> q;
int k; 
int rear;
int MAX_NO = 100000;
myArr[MAX_NO ] = {0,};


void enqueSorted(int element){
   for(int i = 0; i < q.size(); i++ ){
       if(q[i] < element){
           q[i++] = element;
       }
   }
   
   q[k+1] = -1;
}

void main(){

    for(auto i : Arr)
        myArr[i]++; 
    
    for(i =0; i< MAX_NO ; i++){
        enqueSorted.myArr[i];
    }
}



arr   {2, 1, 4, 4, 5, 3, 7, 1}
myarr    2,1,1,2,1,0,1    
       0,1,2,3,4,5,6,7 
       
       














Given the head of a linked list, remove the nth node from the end of the list and return its head.

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Input: head = [1,2], n = 1
Output: [1]

Input: head = [1], n = 1
Output: []




















Find the pairs from 2 given arrays which can sum to a given number k.

Input: Array A = [6, 4, 1, 3, 8]
Input: Array B = [4, 7, 1, 3, 6, 2]
Input: k = 10

Output: [6, 4] [4, 6] [3, 7] [8, 2]


unordered_set<int> mySet;
vector<int> arrA;
vector<int> arrB;
int k =10;

void myInit(){
    for(auto i : arrB)
    mySet.insert(i);
}

void main(){
myInit();

for(auto i : arrA)
    auto res = mySet.find(k-i);
    if(res != mySet.end()) {
        cout << i << ", " << k-i << "\t";
    }
}


